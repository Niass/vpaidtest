var adBase64 = ""

async function sendEventWithToken(
  eventName,
  token,
  label
) {
  if (eventName && token) {
    let urlWithParams = `${EVENT_API_URL}/i.gif?token=${token}&name=${eventName}`;
    if (label && typeof label === "string") {
      urlWithParams = `${urlWithParams}&label=${label}`;
    }
    const [err, response] = await to(fetch(urlWithParams));

    if (response && response.ok) {
      const [, event] = await to(response.json());

      return event;
    }

    throw err;
  }

  throw new Error("Missing params");
}

const AdEvent = {
  CUSTOM : "custom",
}

const SCRIPT_LOADED_LABEL = "scriptLoaded";
const AdDisplayType = {
  UNIFY_STICKY: "unify_sticky",
  RESPONSIVE : "responsive",
  TOP_RESPONSIVE : "top_responsive",
  BOTTOM_RESPONSIVE : "bottom_responsive",
  STICKY : "sticky",
}
// Function to decode base64 encoded ad data
const adDecodeData = (encodedText) =>
  JSON.parse(atob(encodedText));

// Function to get the self window
function getWindowSelf() {
  return window.self;
}

// Function to get the top window
function getWindowTop() {
  return window.top;
}

// Function to check if the top window is accessible
function canAccessTopWindow() {
  try {
    if (getWindowTop().location.href) {
      return true;
    }
  } catch (error) {
    console.log("can t access top", error);
    return false;
  }
}

// Function to get the window context (either top window or self window)
function getWindowContext() {
  return canAccessTopWindow() ? getWindowTop() : getWindowSelf();
}

// Function to check if the current window is a SafeFrame
function isSafeFrameWindow() {
  const ws = getWindowSelf();
  return !!(ws.$sf && ws.$sf.ext);
}

// Function to check if the script is loaded in the context window
function isScriptLoaded(ad) {
  return !!getWindowContext().document.querySelector(`[data-id="${ad.extras.transaction_id}"]`);
}

// Function to retrieve ad data from the current script tag's dataset
function getAdData() {
  try {
    const ad = adDecodeData(adBase64);
    console.log("ad***", ad);
    if (!ad) {
      throw new Error("No Ad found on document.currentScript.dataset.ad");
    }
    return { ad, adm: adBase64 };
  } catch (error) {
    console.log("error getting currentScript.dataset.ad", error);
    return { ad: null, adm: null, format: null };
  }
}

function appendScriptElement(script, isOutsideIframe) {
  if (isOutsideIframe) {
    window.top.document.body.appendChild(script);
  } else {
    document.body.appendChild(script);
  }
}

function createScriptElement(ad, adm, isOutsideIframe) {
  console.log("event.data*** initialize createScriptElement", isOutsideIframe);
  const script = document.createElement("script");
  script.dataset.id = ad.extras.transaction_id;
  script.type = "text/javascript";
  script.async = true;
  script.src = `${urlScript}/creative.js?cb=${cacheBuster}`;
  script.dataset.ad = adm;
  script.dataset.format = isOutsideIframe ? AdDisplayType.STICKY : '';

  return script;
}

function isOutsideIframeAd(ad, format) {
  console.log("can t access top 2", format,ad);
  return !isSafeFrameWindow() && canAccessTopWindow() && ad.tag_infos.display_type
  === "sticky"
}

// const urlScript = process.env.BASE_URL ? process.env.BASE_URL : "https://prebid.bliink.io";
const urlScript = "http://localhost:3000";
const cacheBuster =  1;
console.log("document.currentScript", document.currentScript);
const { ad, adm, format } = getAdData();

if (ad?.creative) {
  if (canAccessTopWindow()) {
    // Store current iframe window in top window for later selection of the iframe
    const bliinksAds = window.top.bliinkLoadedAds || {};
    const currentAd = { window: getWindowSelf() };
    currentAd.isIframe = !!window.frameElement;
    bliinksAds[`bliink_ad_${ad?.extras?.transaction_id}`] = currentAd;
    window.top.bliinkLoadedAds = bliinksAds;

    // Add unique class to parent element for later selection of the placement
    if (!currentAd.isIframe) {
      document.currentScript.parentElement.classList.add(`bliink_ad_${ad?.extras?.transaction_id}`);
      document.currentScript.parentElement.dataset.bliinkAd = ad?.extras?.transaction_id;
    }
  }


  if (!isScriptLoaded(ad)) {
    const isOutsideIframe = isOutsideIframeAd(ad, format);
    const script = createScriptElement(ad, adm, isOutsideIframe, format);
    appendScriptElement(script, isOutsideIframe);
  } else {
    sendEventWithToken(AdEvent.CUSTOM, ad.token, SCRIPT_LOADED_LABEL);
  }
}
