;(function () {
  var adBase64 =
      '',
    displayType = 'IN_IMAGE',
    urlScript = 'http://localhost:3000',
    cacheBuster = 1
  function sendEventWithToken(token) {
    if (!token) return Promise.reject(new Error('Missing params'))
    var urlWithParams = \`https://e.api.bliink.io/i.gif?token=${token}&name=custom&label=scriptLoaded`
    return fetch(urlWithParams).then((response) => {
      if (!response.ok) throw new Error('Response not OK')
    })
  }
  var adDecodeData = (encodedText) => JSON.parse(atob(encodedText))
  function getWindowSelf() {
    return window.self
  }
  function getWindowTop() {
    return window.top
  }
  function canAccessTopWindow() {
    try {
      if (getWindowTop().location.href) return !0
    } catch (error) {
      console.log('can t access top', error)
      return !1
    }
  }
  function getWindowContext() {
    return canAccessTopWindow() ? getWindowTop() : getWindowSelf()
  }
  function isSafeFrameWindow() {
    var ws = getWindowSelf()
    return !!(ws.$sf && ws.$sf.ext)
  }
  function isScriptLoaded(ad) {
    return !!getWindowContext().document.querySelector(`[data-id="${ad.extras.transaction_id}"]`)
  }
  function getAdData() {
    try {
      var ad = adDecodeData(adBase64)
      if (!ad) throw new Error('No Ad found on document.currentScript.dataset.ad')
      return { ad, adm: adBase64 }
    } catch (error) {
      console.log('error getting currentScript.dataset.ad', error)
      return { ad: null, adm: null, format: null }
    }
  }
  function appendScriptElement(script, isOutsideIframe) {
    console.log("appendScriptElement called 0 @");
    console.log("appendScriptElement called 1", document.body);
    if (isOutsideIframe) window.top.document.body.appendChild(script)
    else {
      document.addEventListener('DOMContentLoaded', function() {
        document.body.appendChild(script);
      });
    } 
  }
  function createScriptElement(ad, adm, isOutsideIframe) {
    var script = document.createElement('script')
    script.dataset.id = ad.extras.transaction_id
    script.type = 'text/javascript'
    script.async = !0
    script.src = `${urlScript}/creative.js?cb=${cacheBuster}`
    script.dataset.ad = adm
    script.dataset.format = isOutsideIframe ? 'sticky' : ''
    return script
  }
  function isOutsideIframeAd(ad, format) {
    return !isSafeFrameWindow() && canAccessTopWindow() && 'IN_SCREEN' === displayType
  }
  var { ad, adm, format } = getAdData()
  if (ad?.creative) {
    if (canAccessTopWindow()) {
      var bliinksAds = window.top.bliinkLoadedAds || {},
        currentAd = { window: getWindowSelf() }
      ;(currentAd.isIframe = !!window.frameElement),
        (bliinksAds[`bliink_ad_${ad?.extras?.transaction_id}`] = currentAd),
        (window.top.bliinkLoadedAds = bliinksAds),
        currentAd.isIframe ||
          (document.currentScript.parentElement.classList.add(
            `bliink_ad_${ad?.extras?.transaction_id}`
          ),
          (document.currentScript.parentElement.dataset.bliinkAd = ad?.extras?.transaction_id))
    }
    if (!isScriptLoaded(ad)) {
      var isOutsideIframe = isOutsideIframeAd(ad, format),
        script = createScriptElement(ad, adm, isOutsideIframe, format)
      appendScriptElement(script, isOutsideIframe)
    } else sendEventWithToken(ad.token)
  }
})()
